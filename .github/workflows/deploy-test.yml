name: Portfolio Test-Deployment

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  version:
    name: Version setzen
    runs-on: ubuntu-latest
    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4
      - name: Aktuelle Major-Minor-Version ermitteln
        id: major-minor-version
        run: echo "RESULT=$(npm pkg get version --workspaces=false | tr -d \" | rev | cut -d '.' -f2- | rev)" >> $GITHUB_OUTPUT
      - name: Patch-Version erhöhen
        if: ${{ steps.major-minor-version.outputs.RESULT == vars.MAJOR_MINOR_VERSION }}
        uses: eriknyk/increment-variable-action@v1.0.0
        with:
          name: "PATCH_VERSION"
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
      - name: Patch-Version zurücksetzen
        if: ${{ steps.major-minor-version.outputs.RESULT != vars.MAJOR_MINOR_VERSION }}
        uses: mmoyaferrer/set-github-variable@v1.0.0
        with:
          name: "PATCH_VERSION"
          value: "0"
          repository: Hirschfuchs/portfolio
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
      - name: Major-Minor-Version speichern
        if: ${{ steps.major-minor-version.outputs.RESULT != vars.MAJOR_MINOR_VERSION }}
        uses: mmoyaferrer/set-github-variable@v1.0.0
        with:
          name: "MAJOR_MINOR_VERSION"
          value: ${{ steps.major-minor-version.outputs.RESULT }}
          repository: Hirschfuchs/portfolio
          token: ${{ secrets.REPO_ACCESS_TOKEN }}

  build:
    name: Bauen
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Version setzen
        run: npm version $MAJOR_MINOR_VERSION.$PATCH_VERSION --no-git-tag-version
        env:
          MAJOR_MINOR_VERSION: ${{ vars.MAJOR_MINOR_VERSION }}
          PATCH_VERSION: ${{ vars.PATCH_VERSION }}
      - uses: browser-actions/setup-chrome@v1
      - name: Abhängigkeiten laden
        run: npm i
      - name: Projekt bauen
        run: npm run build
      - uses: actions/upload-artifact@master
        with:
          name: result
          path: dist/
      - name: Release erzeugen
        uses: elgohr/Github-Release-Action@v5
        env:
          GH_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        with:
          title: Version ${{ vars.MAJOR_MINOR_VERSION }}.${{ vars.PATCH_VERSION }}
          tag: v${{ vars.MAJOR_MINOR_VERSION }}.${{ vars.PATCH_VERSION }}
          workdir: dist/portfolio-fox
    needs: [version]

  deploy:
    name: Deployen
    runs-on: ubuntu-latest
    steps:
      - name: Vorbereiten
        uses: actions/checkout@v4

      - name: Hole gebautes Ergebnis
        uses: actions/download-artifact@master
        with:
          name: result
          path: dist/

      - name: FTP-Upload
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: bono-fox.de
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: dist/portfolio-fox/browser/
          server-dir: test/
    needs: [build]
